// Copyright (c) 2014 AlphaSierraPapa for the SharpDevelop Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

using System;
using System.Windows.Forms;
using ICSharpCode.SharpDevelop.Project;
using ICSharpCode.UnitTesting;
using NUnit.Framework;
using UnitTesting.Tests.Utils;

namespace UnitTesting.Tests.Tree
{
	/// <summary>
	/// Tests that if the parser is still running then we do not
	/// add the solution to the unit tests tree.
	/// </summary>
	[TestFixture]
	public class OpenUnitTestsPadWithSolutionOpenTestFixture
	{
		DerivedUnitTestsPad pad;
		
		[TestFixtureSetUp]
		public void SetUp()
		{
			Solution solution = new Solution(new MockProjectChangeWatcher());
			MockCSharpProject project = new MockCSharpProject();
			MockProjectContent projectContent = new MockProjectContent();
			projectContent.Project = project;
			projectContent.Language = LanguageProperties.None;
			ReferenceProjectItem refProjectItem = new ReferenceProjectItem(project);
			refProjectItem.Include = "NUnit.Framework";
			ProjectService.AddProjectItem(project, refProjectItem);
			solution.Folders.Add(project);
			
			pad = new DerivedUnitTestsPad(solution);
		}
		
		[TestFixtureTearDown]
		public void TearDown()
		{
			pad.Dispose();
		}
		
		[Test]
		public void NoSolutionAddedToTree()
		{
			Assert.AreEqual(0, pad.TestTreeView.GetProjects().Length);
		}
		
		/// <summary>
		/// The LoadSolutionProjectsThreadEnded event handler needs to be
		/// added before the unit tests pad checks the 
		/// LoadSolutionProjectsThreadRunning flag so we do not miss the
		/// event.
		/// </summary>
		[Test]
		public void ParserServiceLoadSolutionProjectsThreadEndedHandled()
		{
			Assert.IsTrue(pad.LoadSolutionProjectsThreadEndedHandled);
		}
	}
}
