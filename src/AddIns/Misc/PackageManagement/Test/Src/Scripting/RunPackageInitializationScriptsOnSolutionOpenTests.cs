// Copyright (c) 2014 AlphaSierraPapa for the SharpDevelop Team
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files (the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

using System;
using ICSharpCode.PackageManagement.Design;
using ICSharpCode.PackageManagement.Scripting;
using ICSharpCode.Scripting;
using ICSharpCode.Scripting.Tests.Utils;
using ICSharpCode.SharpDevelop.Project;
using NUnit.Framework;
using PackageManagement.Tests.Helpers;

namespace PackageManagement.Tests.Scripting
{
	[TestFixture]
	public class RunPackageInitializationScriptsOnSolutionOpenTests
	{
		FakePackageInitializationScriptsFactory fakeScriptsFactory;
		FakePackageManagementProjectService fakeProjectService;
		RunPackageInitializationScriptsOnSolutionOpen runner;
		FakePackageManagementConsoleHost fakeConsoleHost;
		FakeScriptingConsole fakeScriptingConsole;
		PackageInitializationScriptsConsole scriptsConsole;
		
		void CreateRunner()
		{
			fakeProjectService = new FakePackageManagementProjectService();
			fakeConsoleHost = new FakePackageManagementConsoleHost();
			fakeScriptingConsole = new FakeScriptingConsole();
			fakeConsoleHost.ScriptingConsole = fakeScriptingConsole;
			scriptsConsole = new PackageInitializationScriptsConsole(fakeConsoleHost);
			fakeScriptsFactory = new FakePackageInitializationScriptsFactory();
			runner = new RunPackageInitializationScriptsOnSolutionOpen(fakeProjectService, scriptsConsole, fakeScriptsFactory);
		}
		
		ISolution OpenSolution()
		{
			var helper = new SolutionHelper(@"d:\projects\myprojects\test.csproj");
			ISolution solution = helper.MSBuildSolution;
			fakeProjectService.FireSolutionOpenedEvent(solution);
			return solution;
		}
		
		void SolutionHasPackageInitializationScripts()
		{
			fakeScriptsFactory.FakePackageInitializationScripts.AnyReturnValue = true;
		}
		
		void SolutionHasNoPackageInitializationScripts()
		{
			fakeScriptsFactory.FakePackageInitializationScripts.AnyReturnValue = false;
		}
		
		[Test]
		public void Instance_SolutionIsOpened_PackageInitializationScriptsCreatedUsingSolution()
		{
			CreateRunner();
			ISolution expectedSolution = OpenSolution();
			
			ISolution actualSolution = fakeScriptsFactory.SolutionPassedToCreatePackageInitializationScripts;
			
			Assert.AreEqual(expectedSolution, actualSolution);
		}
		
		[Test]
		public void Instance_SolutionOpenedAndHasPackageInitializationScripts_InvokeInitializePackagesCmdletIsRun()
		{
			CreateRunner();
			SolutionHasPackageInitializationScripts();
			fakeConsoleHost.IsRunning = true;
			OpenSolution();
			
			string command = fakeConsoleHost.LastCommandExecuted;
			string expectedCommand = "Invoke-InitializePackages";
			
			Assert.AreEqual(expectedCommand, command);
		}
		
		[Test]
		public void Instance_SolutionOpenedAndHasNoPackageInitializationScripts_InvokeInitializePackagesCmdletIsNotRun()
		{
			CreateRunner();
			SolutionHasNoPackageInitializationScripts();
			fakeConsoleHost.IsRunning = true;
			OpenSolution();
			
			bool contains = fakeConsoleHost.CommandsExecuted.Contains("Invoke-InitializePackages");
			
			Assert.IsFalse(contains);
		}
		
		[Test]
		public void Instance_ExceptionThrownByScriptsFactory_ErrorMessageLoggedToConsole()
		{
			CreateRunner();
			SolutionHasPackageInitializationScripts();
			fakeConsoleHost.IsRunning = true;
			fakeScriptsFactory.ExceptionToThrow = new Exception("Error");
			
			OpenSolution();
			
			Assert.AreEqual("Error", fakeScriptingConsole.TextPassedToWriteLine);
			Assert.AreEqual(ScriptingStyle.Error, fakeScriptingConsole.ScriptingStylePassedToWriteLine);
			Assert.IsTrue(fakeConsoleHost.IsWritePromptCalled);
		}
		
		[Test]
		public void Instance_ExceptionThrownByScriptsFactoryButConsoleIsNotRunning_NoErrorMessageLoggedToConsole()
		{
			CreateRunner();
			SolutionHasPackageInitializationScripts();
			fakeConsoleHost.IsRunning = false;
			fakeScriptsFactory.ExceptionToThrow = new Exception("Error");
			
			OpenSolution();
			
			Assert.IsNull(fakeScriptingConsole.TextPassedToWriteLine);
		}
	}
}
