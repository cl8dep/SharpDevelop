<#@ template language="VB" HostSpecific="true" #>
<#@ import namespace="ICSharpCode.AspNet.Mvc" #>
<#@ import namespace="Microsoft.VisualBasic.Constants" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".vbhtml" #>
<#= GetModelDirective() #>

<# 
	If MvcHost.IsPartialView Then
		' Do nothing.
	ElseIf MvcHost.IsContentPage Then
#>
@Code
	ViewData("Title") = "<#= MvcHost.ViewName #>"
	Layout = "<#= MvcHost.MasterPageFile #>"
End Code

<h2><#= MvcHost.ViewName #></h2>

<#
	Else
#>
<!DOCTYPE html>
<html>
	<head runat="server">
		<title><#= MvcHost.ViewName #></title>
	</head>
	<body>
<#
		PushIndent(vbTab & vbTab)
	End If
#>
<p>
	@Html.ActionLink("Create", "Create")
</p>
<table>
<#
	If ModelHasProperties Then
#>
	<tr>
<#
		For Each modelProperty As ModelProperty in ModelProperties
			If Not modelProperty.IsPrimaryKey Then
#>
		<th>
			@Html.LabelFor(Function(model) model.<#= modelProperty.Name #>)
		</th>
<#
			End If
		Next
#>
		<th></th>
	</tr>
	
<#
	End If 
#>
@For Each item in Model
	@<tr>
<#
	If ModelHasProperties Then
		For Each modelProperty As ModelProperty in ModelProperties
			If Not modelProperty.IsPrimaryKey then
#>
		<td>
			@Html.DisplayFor(Function(model) model.<#= modelProperty.Name #>)
		</td>
<#
			End If
		Next
	End If
#>
		<td>
<# If ModelHasPrimaryKey Then #>
			@Html.ActionLink("Edit", "Edit", New With { .id = item.<#= ModelPrimaryKeyName #> }) |
			@Html.ActionLink("Details", "Details", New With { .id = item.<#= ModelPrimaryKeyName #> }) |
			@Html.ActionLink("Delete", "Delete", New With { .id = item.<#= ModelPrimaryKeyName #> })
<# Else #>
			@Html.ActionLink("Edit", "Edit") |
			@Html.ActionLink("Details", "Details") |
			@Html.ActionLink("Delete", "Delete")
<# End If #>
		</td>
	</tr>
Next
</table>
<# 
	If MvcHost.IsPartialView Then
		' Do nothing.
	ElseIf Not MvcHost.IsContentPage Then
		PopIndent()
#>
	</body>
</html>
<# End If #>
<#+
	ReadOnly Property MvcHost As MvcTextTemplateHost
		Get
			Return DirectCast(Host, MvcTextTemplateHost)
		End Get
	End Property
	
	Public Class ModelProperty
		Public Property Name() As String
		Public Property IsPrimaryKey() As Boolean
		
		Public Sub New(ByVal propertyInfo As PropertyInfo)
			Me.Name = propertyInfo.Name
			Me.IsPrimaryKey = IsPrimaryKeyProperty(propertyInfo)
		End Sub
		
		Function IsPrimaryKeyProperty(ByVal propertyInfo As PropertyInfo) As Boolean
			Return IsIdProperty(propertyInfo) Or _
				IsIdPropertyPrefixedWithClassName(propertyInfo)
		End Function
		
		Function IsIdProperty(ByVal propertyInfo As PropertyInfo) As Boolean
			Return IsMatchIgnoringCase(propertyInfo.Name, "id")
		End Function
		
		Function IsIdPropertyPrefixedWithClassName(ByVal propertyInfo As PropertyInfo) As Boolean
			Dim prefixedIdPropertyName As String = propertyInfo.DeclaringType.Name + "id"
			Return IsMatchIgnoringCase(propertyInfo.Name, prefixedIdPropertyName)
		End Function
		
		Shared Function IsMatchIgnoringCase(ByVal a As String, ByVal b as String) As Boolean
			Return String.Equals(a, b, StringComparison.OrdinalIgnoreCase)
		End Function
	End Class
	
	Function GetModelDirective() As String
		Dim viewDataTypeName As String = MvcHost.ViewDataTypeName
		If Not String.IsNullOrEmpty(viewDataTypeName) Then
			Return String.Format("@ModelType IEnumerable(Of {0})", viewDataTypeName)
		End If
		Return String.Empty
	End Function
	
	Private modelPropertiesList As List(Of ModelProperty)
	
	ReadOnly Property ModelProperties() As List(Of ModelProperty)
		Get
			If modelPropertiesList Is Nothing Then
				modelPropertiesList = New List(Of ModelProperty)(GetModelProperties())
			End If
			Return modelPropertiesList
		End Get
	End Property
	
	Public Function GetModelProperties() As IEnumerable(Of ModelProperty)
		Dim properties = New List(Of ModelProperty)()
		For Each propertyInfo As PropertyInfo In MvcHost.GetViewDataTypeProperties()
			properties.Add(new ModelProperty(propertyInfo))
		Next
		Return properties
	End Function
	
	ReadOnly Property ModelHasProperties As Boolean
		Get
			Return ModelProperties.Count > 0
		End Get
	End Property
	
	ReadOnly Property ModelHasPrimaryKey As Boolean
		Get
			Return ModelPrimaryKeyName.Length > 0
		End Get
	End Property

	Private modelPrimaryKeyNameValue As String
	
	ReadOnly Property ModelPrimaryKeyName() As String
		Get
			If modelPrimaryKeyNameValue Is Nothing Then
				modelPrimaryKeyNameValue = GetModelPrimaryKeyName()
			End If
			Return modelPrimaryKeyNameValue
		End Get
	End Property
	
	Public Function GetModelPrimaryKeyName() As String
		For Each modelProperty As ModelProperty in ModelProperties
			If modelProperty.IsPrimaryKey Then
				Return modelProperty.Name
			End If
		Next
		Return ""
	End Function
#>