//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.288
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.InteropServices.ImportedFromTypeLib("CORDBLib")]
[assembly: System.Runtime.InteropServices.Guid("53d13620-f417-11d1-9762-a63826a4f255")]

namespace CORDBLib_1_0 {
    
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("3d6f5f61-7538-11d3-8d5b-00104b35e7ef")]
    public interface ICorDebug {
        
        void Initialize();
        
        void Terminate();
        
        void SetManagedHandler([System.Runtime.InteropServices.In()] ICorDebugManagedCallback pCallback);
        
        void SetUnmanagedHandler([System.Runtime.InteropServices.In()] ICorDebugUnmanagedCallback pCallback);
        
        ICorDebugProcess CreateProcess([System.Runtime.InteropServices.In()] string lpApplicationName, [System.Runtime.InteropServices.In()] string lpCommandLine, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpProcessAttributes, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpThreadAttributes, [System.Runtime.InteropServices.In()] int bInheritHandles, [System.Runtime.InteropServices.In()] System.UInt32 dwCreationFlags, [System.Runtime.InteropServices.In()] System.IntPtr lpEnvironment, [System.Runtime.InteropServices.In()] string lpCurrentDirectory, [System.Runtime.InteropServices.In()] System.UInt32 lpStartupInfo, [System.Runtime.InteropServices.In()] System.UInt32 lpProcessInformation, [System.Runtime.InteropServices.In()] CorDebugCreateProcessFlags debuggingFlags);
        
        ICorDebugProcess DebugActiveProcess([System.Runtime.InteropServices.In()] System.UInt32 id, [System.Runtime.InteropServices.In()] int win32Attach);
        
        ICorDebugProcessEnum EnumerateProcesses();
        
        ICorDebugProcess GetProcess([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId);
        
        void CanLaunchOrAttach([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId, [System.Runtime.InteropServices.In()] int win32DebuggingEnabled);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("3d6f5f60-7538-11d3-8d5b-00104b35e7ef")]
    public interface ICorDebugManagedCallback {
        
        void Breakpoint([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] ICorDebugBreakpoint pBreakpoint);
        
        void StepComplete([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] ICorDebugStepper pStepper, [System.Runtime.InteropServices.In()] CorDebugStepReason reason);
        
        void Break([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread thread);
        
        void Exception([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] int unhandled);
        
        void EvalComplete([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] ICorDebugEval pEval);
        
        void EvalException([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] ICorDebugEval pEval);
        
        void CreateProcess([System.Runtime.InteropServices.In()] ICorDebugProcess pProcess);
        
        void ExitProcess([System.Runtime.InteropServices.In()] ICorDebugProcess pProcess);
        
        void CreateThread([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread thread);
        
        void ExitThread([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread thread);
        
        void LoadModule([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugModule pModule);
        
        void UnloadModule([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugModule pModule);
        
        void LoadClass([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugClass c);
        
        void UnloadClass([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugClass c);
        
        void DebuggerError([System.Runtime.InteropServices.In()] ICorDebugProcess pProcess, [System.Runtime.InteropServices.In()] int errorHR, [System.Runtime.InteropServices.In()] System.UInt32 errorCode);
        
        void LogMessage([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] int lLevel, [System.Runtime.InteropServices.In()] System.UInt16 pLogSwitchName, [System.Runtime.InteropServices.In()] System.UInt16 pMessage);
        
        void LogSwitch([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] int lLevel, [System.Runtime.InteropServices.In()] System.UInt32 ulReason, [System.Runtime.InteropServices.In()] System.UInt16 pLogSwitchName, [System.Runtime.InteropServices.In()] System.UInt16 pParentName);
        
        void CreateAppDomain([System.Runtime.InteropServices.In()] ICorDebugProcess pProcess, [System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain);
        
        void ExitAppDomain([System.Runtime.InteropServices.In()] ICorDebugProcess pProcess, [System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain);
        
        void LoadAssembly([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugAssembly pAssembly);
        
        void UnloadAssembly([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugAssembly pAssembly);
        
        void ControlCTrap([System.Runtime.InteropServices.In()] ICorDebugProcess pProcess);
        
        void NameChange([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread);
        
        void UpdateModuleSymbols([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugModule pModule, [System.Runtime.InteropServices.In()] IStream pSymbolStream);
        
        void EditAndContinueRemap([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] ICorDebugFunction pFunction, [System.Runtime.InteropServices.In()] int fAccurate);
        
        void BreakpointSetError([System.Runtime.InteropServices.In()] ICorDebugAppDomain pAppDomain, [System.Runtime.InteropServices.In()] ICorDebugThread pThread, [System.Runtime.InteropServices.In()] ICorDebugBreakpoint pBreakpoint, [System.Runtime.InteropServices.In()] System.UInt32 dwError);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("3d6f5f63-7538-11d3-8d5b-00104b35e7ef")]
    public interface ICorDebugAppDomain : ICorDebugController {
        
        void Stop([System.Runtime.InteropServices.In()] System.UInt32 dwTimeout);
        
        void Continue([System.Runtime.InteropServices.In()] int fIsOutOfBand);
        
        int IsRunning();
        
        int HasQueuedCallbacks([System.Runtime.InteropServices.In()] ICorDebugThread pThread);
        
        ICorDebugThreadEnum EnumerateThreads();
        
        void SetAllThreadsDebugState([System.Runtime.InteropServices.In()] CorDebugThreadState state, [System.Runtime.InteropServices.In()] ICorDebugThread pExceptThisThread);
        
        void Detach();
        
        void Terminate([System.Runtime.InteropServices.In()] System.UInt32 exitCode);
        
        ICorDebugErrorInfoEnum CanCommitChanges([System.Runtime.InteropServices.In()] System.UInt32 cSnapshots, [System.Runtime.InteropServices.In()] ref ICorDebugEditAndContinueSnapshot pSnapshots);
        
        ICorDebugErrorInfoEnum CommitChanges([System.Runtime.InteropServices.In()] System.UInt32 cSnapshots, [System.Runtime.InteropServices.In()] ref ICorDebugEditAndContinueSnapshot pSnapshots);
        
        ICorDebugProcess GetProcess();
        
        ICorDebugAssemblyEnum EnumerateAssemblies();
        
        ICorDebugModule GetModuleFromMetaDataInterface([System.Runtime.InteropServices.In()] object pIMetaData);
        
        ICorDebugBreakpointEnum EnumerateBreakpoints();
        
        ICorDebugStepperEnum EnumerateSteppers();
        
        int IsAttached();
        
        ICorDebugAppDomain GetName([System.Runtime.InteropServices.In()] System.UInt32 cchName, [System.Runtime.InteropServices.Out()] out System.UInt32 pcchName);
        
        ICorDebugValue GetObject();
        
        void Attach();
        
        System.UInt32 GetID();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("3d6f5f62-7538-11d3-8d5b-00104b35e7ef")]
    public interface ICorDebugController {
        
        void Stop([System.Runtime.InteropServices.In()] System.UInt32 dwTimeout);
        
        void Continue([System.Runtime.InteropServices.In()] int fIsOutOfBand);
        
        int IsRunning();
        
        int HasQueuedCallbacks([System.Runtime.InteropServices.In()] ICorDebugThread pThread);
        
        ICorDebugThreadEnum EnumerateThreads();
        
        void SetAllThreadsDebugState([System.Runtime.InteropServices.In()] CorDebugThreadState state, [System.Runtime.InteropServices.In()] ICorDebugThread pExceptThisThread);
        
        void Detach();
        
        void Terminate([System.Runtime.InteropServices.In()] System.UInt32 exitCode);
        
        ICorDebugErrorInfoEnum CanCommitChanges([System.Runtime.InteropServices.In()] System.UInt32 cSnapshots, [System.Runtime.InteropServices.In()] ref ICorDebugEditAndContinueSnapshot pSnapshots);
        
        ICorDebugErrorInfoEnum CommitChanges([System.Runtime.InteropServices.In()] System.UInt32 cSnapshots, [System.Runtime.InteropServices.In()] ref ICorDebugEditAndContinueSnapshot pSnapshots);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("938c6d66-7fb6-4f69-b389-425b8987329b")]
    public interface ICorDebugThread {
        
        ICorDebugProcess GetProcess();
        
        System.UInt32 GetID();
        
        System.UInt32 GetHandle();
        
        ICorDebugAppDomain GetAppDomain();
        
        void SetDebugState([System.Runtime.InteropServices.In()] CorDebugThreadState state);
        
        CorDebugThreadState GetDebugState();
        
        CorDebugUserState GetUserState();
        
        ICorDebugValue GetCurrentException();
        
        void ClearCurrentException();
        
        ICorDebugStepper CreateStepper();
        
        ICorDebugChainEnum EnumerateChains();
        
        ICorDebugChain GetActiveChain();
        
        ICorDebugFrame GetActiveFrame();
        
        ICorDebugRegisterSet GetRegisterSet();
        
        ICorDebugEval CreateEval();
        
        ICorDebugValue GetObject();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("3d6f5f64-7538-11d3-8d5b-00104b35e7ef")]
    public interface ICorDebugProcess : ICorDebugController {
        
        void Stop([System.Runtime.InteropServices.In()] System.UInt32 dwTimeout);
        
        void Continue([System.Runtime.InteropServices.In()] int fIsOutOfBand);
        
        int IsRunning();
        
        int HasQueuedCallbacks([System.Runtime.InteropServices.In()] ICorDebugThread pThread);
        
        ICorDebugThreadEnum EnumerateThreads();
        
        void SetAllThreadsDebugState([System.Runtime.InteropServices.In()] CorDebugThreadState state, [System.Runtime.InteropServices.In()] ICorDebugThread pExceptThisThread);
        
        void Detach();
        
        void Terminate([System.Runtime.InteropServices.In()] System.UInt32 exitCode);
        
        ICorDebugErrorInfoEnum CanCommitChanges([System.Runtime.InteropServices.In()] System.UInt32 cSnapshots, [System.Runtime.InteropServices.In()] ref ICorDebugEditAndContinueSnapshot pSnapshots);
        
        ICorDebugErrorInfoEnum CommitChanges([System.Runtime.InteropServices.In()] System.UInt32 cSnapshots, [System.Runtime.InteropServices.In()] ref ICorDebugEditAndContinueSnapshot pSnapshots);
        
        System.UInt32 GetID();
        
        System.UInt32 GetHandle();
        
        ICorDebugThread GetThread([System.Runtime.InteropServices.In()] System.UInt32 dwThreadId);
        
        ICorDebugObjectEnum EnumerateObjects();
        
        int IsTransitionStub([System.Runtime.InteropServices.In()] System.UInt64 address);
        
        int IsOSSuspended([System.Runtime.InteropServices.In()] System.UInt32 threadID);
        
        ICorDebugProcess GetThreadContext([System.Runtime.InteropServices.In()] System.UInt32 threadID, [System.Runtime.InteropServices.In()] System.UInt32 contextSize);
        
        void SetThreadContext([System.Runtime.InteropServices.In()] System.UInt32 threadID, [System.Runtime.InteropServices.In()] System.UInt32 contextSize, [System.Runtime.InteropServices.In()] ICorDebugProcess context);
        
        System.UInt32 ReadMemory([System.Runtime.InteropServices.In()] System.UInt64 address, [System.Runtime.InteropServices.In()] System.UInt32 size, [System.Runtime.InteropServices.Out()] out ICorDebugProcess buffer);
        
        System.UInt32 WriteMemory([System.Runtime.InteropServices.In()] System.UInt64 address, [System.Runtime.InteropServices.In()] System.UInt32 size, [System.Runtime.InteropServices.In()] System.Byte buffer);
        
        void ClearCurrentException([System.Runtime.InteropServices.In()] System.UInt32 threadID);
        
        void EnableLogMessages([System.Runtime.InteropServices.In()] int fOnOff);
        
        void ModifyLogSwitch([System.Runtime.InteropServices.In()] System.UInt16 pLogSwitchName, [System.Runtime.InteropServices.In()] int lLevel);
        
        [return: System.Runtime.InteropServices.MarshalAs(System.Runtime.InteropServices.UnmanagedType.CustomMarshaler,
                           MarshalType="NoGoop.Debug.EnumMarshaler,CompInsp")]
        ICorDebugAppDomainEnum EnumerateAppDomains();
        
        ICorDebugValue GetObject();
        
        ICorDebugThread ThreadForFiberCookie([System.Runtime.InteropServices.In()] System.UInt32 fiberCookie);
        
        System.UInt32 GetHelperThreadID();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb02-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugObjectEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugObjectEnum objects);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb01-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("63ca1b24-4359-4883-bd57-13f815f58744")]
    public interface ICorDebugAppDomainEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugAppDomain values);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaf7-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugValue {
        
        System.UInt32 GetType();
        
        System.UInt32 GetSize();
        
        System.UInt64 GetAddress();
        
        ICorDebugValueBreakpoint CreateBreakpoint();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaeb-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugValueBreakpoint : ICorDebugBreakpoint {
        
        void Activate([System.Runtime.InteropServices.In()] int bActive);
        
        int IsActive();
        
        ICorDebugValue GetValue();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcae8-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugBreakpoint {
        
        void Activate([System.Runtime.InteropServices.In()] int bActive);
        
        int IsActive();
    }
    
    public enum CorDebugThreadState {
        
        THREAD_RUN = 0,
        
        THREAD_SUSPEND = 1,
    }
    
    public enum CorDebugUserState {
        
        USER_STOP_REQUESTED = 1,
        
        USER_SUSPEND_REQUESTED = 2,
        
        USER_BACKGROUND = 4,
        
        USER_UNSTARTED = 8,
        
        USER_STOPPED = 16,
        
        USER_WAIT_SLEEP_JOIN = 32,
        
        USER_SUSPENDED = 64,
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaec-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugStepper {
        
        int IsActive();
        
        void Deactivate();
        
        void SetInterceptMask([System.Runtime.InteropServices.In()] CorDebugIntercept mask);
        
        void SetUnmappedStopMask([System.Runtime.InteropServices.In()] CorDebugUnmappedStop mask);
        
        void Step([System.Runtime.InteropServices.In()] int bStepIn);
        
        void StepRange([System.Runtime.InteropServices.In()] int bStepIn, [System.Runtime.InteropServices.In()] COR_DEBUG_STEP_RANGE ranges, [System.Runtime.InteropServices.In()] System.UInt32 cRangeCount);
        
        void StepOut();
        
        void SetRangeIL([System.Runtime.InteropServices.In()] int bIL);
    }
    
    public enum CorDebugIntercept {
        
        INTERCEPT_NONE = 0,
        
        INTERCEPT_CLASS_INIT = 1,
        
        INTERCEPT_EXCEPTION_FILTER = 2,
        
        INTERCEPT_SECURITY = 4,
        
        INTERCEPT_CONTEXT_POLICY = 8,
        
        INTERCEPT_INTERCEPTION = 16,
        
        INTERCEPT_ALL = 65535,
    }
    
    public enum CorDebugUnmappedStop {
        
        STOP_NONE = 0,
        
        STOP_PROLOG = 1,
        
        STOP_EPILOG = 2,
        
        STOP_NO_MAPPING_INFO = 4,
        
        STOP_OTHER_UNMAPPED = 8,
        
        STOP_UNMANAGED = 16,
        
        STOP_ALL = 65535,
    }
    
    public struct COR_DEBUG_STEP_RANGE {
        
        public System.UInt32 startOffset;
        
        public System.UInt32 endOffset;
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb08-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugChainEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugChainEnum chains);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaee-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugChain {
        
        ICorDebugThread GetThread();
        
        void GetStackRange([System.Runtime.InteropServices.Out()] out System.UInt64 pStart, [System.Runtime.InteropServices.Out()] out System.UInt64 pEnd);
        
        ICorDebugContext GetContext();
        
        ICorDebugChain GetCaller();
        
        ICorDebugChain GetCallee();
        
        ICorDebugChain GetPrevious();
        
        ICorDebugChain GetNext();
        
        int IsManaged();
        
        ICorDebugFrameEnum EnumerateFrames();
        
        ICorDebugFrame GetActiveFrame();
        
        ICorDebugRegisterSet GetRegisterSet();
        
        CorDebugChainReason GetReason();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb00-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugContext : ICorDebugObjectValue {
        
        ICorDebugClass GetClass();
        
        ICorDebugValue GetFieldValue([System.Runtime.InteropServices.In()] ICorDebugClass pClass, [System.Runtime.InteropServices.In()] System.UInt32 fieldDef);
        
        ICorDebugFunction GetVirtualMethod([System.Runtime.InteropServices.In()] System.UInt32 memberRef);
        
        ICorDebugContext GetContext();
        
        int IsValueClass();
        
        object GetManagedCopy();
        
        void SetFromManagedCopy([System.Runtime.InteropServices.In()] object pObject);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("18ad3d6e-b7d2-11d2-bd04-0000f80849bd")]
    public interface ICorDebugObjectValue : ICorDebugValue {
        
        System.UInt32 GetType();
        
        System.UInt32 GetSize();
        
        System.UInt64 GetAddress();
        
        ICorDebugValueBreakpoint CreateBreakpoint();
        
        ICorDebugClass GetClass();
        
        ICorDebugValue GetFieldValue([System.Runtime.InteropServices.In()] ICorDebugClass pClass, [System.Runtime.InteropServices.In()] System.UInt32 fieldDef);
        
        ICorDebugFunction GetVirtualMethod([System.Runtime.InteropServices.In()] System.UInt32 memberRef);
        
        ICorDebugContext GetContext();
        
        int IsValueClass();
        
        object GetManagedCopy();
        
        void SetFromManagedCopy([System.Runtime.InteropServices.In()] object pObject);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaf5-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugClass {
        
        ICorDebugModule GetModule();
        
        System.UInt32 GetToken();
        
        ICorDebugValue GetStaticFieldValue([System.Runtime.InteropServices.In()] System.UInt32 fieldDef, [System.Runtime.InteropServices.In()] ICorDebugFrame pFrame);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("dba2d8c1-e5c5-4069-8c13-10a7c6abf43d")]
    public interface ICorDebugModule {
        
        ICorDebugProcess GetProcess();
        
        System.UInt64 GetBaseAddress();
        
        ICorDebugAssembly GetAssembly();
        
        ICorDebugModule GetName([System.Runtime.InteropServices.In()] System.UInt32 cchName, [System.Runtime.InteropServices.Out()] out System.UInt32 pcchName);
        
        void EnableJITDebugging([System.Runtime.InteropServices.In()] int bTrackJITInfo, [System.Runtime.InteropServices.In()] int bAllowJitOpts);
        
        void EnableClassLoadCallbacks([System.Runtime.InteropServices.In()] int bClassLoadCallbacks);
        
        ICorDebugFunction GetFunctionFromToken([System.Runtime.InteropServices.In()] System.UInt32 methodDef);
        
        ICorDebugFunction GetFunctionFromRVA([System.Runtime.InteropServices.In()] System.UInt64 rva);
        
        ICorDebugClass GetClassFromToken([System.Runtime.InteropServices.In()] System.UInt32 typeDef);
        
        ICorDebugModuleBreakpoint CreateBreakpoint();
        
        ICorDebugEditAndContinueSnapshot GetEditAndContinueSnapshot();
        
        object GetMetaDataInterface([System.Runtime.InteropServices.In()] System.Guid riid);
        
        System.UInt32 GetToken();
        
        int IsDynamic();
        
        ICorDebugValue GetGlobalVariableValue([System.Runtime.InteropServices.In()] System.UInt32 fieldDef);
        
        System.UInt32 GetSize();
        
        int IsInMemory();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("df59507c-d47a-459e-bce2-6427eac8fd06")]
    public interface ICorDebugAssembly {
        
        ICorDebugProcess GetProcess();
        
        ICorDebugAppDomain GetAppDomain();
        
        ICorDebugModuleEnum EnumerateModules();
        
        ICorDebugAssembly GetCodeBase([System.Runtime.InteropServices.In()] System.UInt32 cchName, [System.Runtime.InteropServices.Out()] out System.UInt32 pcchName);
        
        ICorDebugAssembly GetName([System.Runtime.InteropServices.In()] System.UInt32 cchName, [System.Runtime.InteropServices.Out()] out System.UInt32 pcchName);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb09-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugModuleEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugModuleEnum modules);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaf3-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugFunction {
        
        ICorDebugModule GetModule();
        
        ICorDebugClass GetClass();
        
        System.UInt32 GetToken();
        
        ICorDebugCode GetILCode();
        
        ICorDebugCode GetNativeCode();
        
        ICorDebugFunctionBreakpoint CreateBreakpoint();
        
        System.UInt32 GetLocalVarSigToken();
        
        System.UInt32 GetCurrentVersionNumber();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaf4-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugCode {
        
        int IsIL();
        
        ICorDebugFunction GetFunction();
        
        System.UInt64 GetAddress();
        
        System.UInt32 GetSize();
        
        ICorDebugFunctionBreakpoint CreateBreakpoint([System.Runtime.InteropServices.In()] System.UInt32 offset);
        
        System.UInt32 GetCode([System.Runtime.InteropServices.In()] System.UInt32 startOffset, [System.Runtime.InteropServices.In()] System.UInt32 endOffset, [System.Runtime.InteropServices.In()] System.UInt32 cBufferAlloc, [System.Runtime.InteropServices.Out()] out ICorDebugCode buffer);
        
        System.UInt32 GetVersionNumber();
        
        ICorDebugCode GetILToNativeMapping([System.Runtime.InteropServices.In()] System.UInt32 cMap, [System.Runtime.InteropServices.Out()] out System.UInt32 pcMap);
        
        ICorDebugCode GetEnCRemapSequencePoints([System.Runtime.InteropServices.In()] System.UInt32 cMap, [System.Runtime.InteropServices.Out()] out System.UInt32 pcMap);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcae9-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugFunctionBreakpoint : ICorDebugBreakpoint {
        
        void Activate([System.Runtime.InteropServices.In()] int bActive);
        
        int IsActive();
        
        ICorDebugFunction GetFunction();
        
        System.UInt32 GetOffset();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaea-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugModuleBreakpoint : ICorDebugBreakpoint {
        
        void Activate([System.Runtime.InteropServices.In()] int bActive);
        
        int IsActive();
        
        ICorDebugModule GetModule();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("6dc3fa01-d7cb-11d2-8a95-0080c792e5d8")]
    public interface ICorDebugEditAndContinueSnapshot {
        
        System.Guid CopyMetaData([System.Runtime.InteropServices.In()] IStream pIStream);
        
        System.Guid GetMvid();
        
        System.UInt32 GetRoDataRVA();
        
        System.UInt32 GetRwDataRVA();
        
        void SetPEBytes([System.Runtime.InteropServices.In()] IStream pIStream);
        
        void SetILMap([System.Runtime.InteropServices.In()] System.UInt32 mdFunction, [System.Runtime.InteropServices.In()] System.UInt32 cMapSize, [System.Runtime.InteropServices.In()] _COR_IL_MAP map);
        
        void SetPESymbolBytes([System.Runtime.InteropServices.In()] IStream pIStream);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("0000000c-0000-0000-c000-000000000046")]
    public interface IStream : ISequentialStream {
        
        void RemoteRead([System.Runtime.InteropServices.Out()] out System.Byte pv, [System.Runtime.InteropServices.In()] System.UInt32 cb, [System.Runtime.InteropServices.Out()] out System.UInt32 pcbRead);
        
        void RemoteWrite([System.Runtime.InteropServices.In()] System.Byte pv, [System.Runtime.InteropServices.In()] System.UInt32 cb, [System.Runtime.InteropServices.Out()] out System.UInt32 pcbWritten);
        
        void RemoteSeek([System.Runtime.InteropServices.In()] _LARGE_INTEGER dlibMove, [System.Runtime.InteropServices.In()] System.UInt32 dwOrigin, [System.Runtime.InteropServices.Out()] out _ULARGE_INTEGER plibNewPosition);
        
        void SetSize([System.Runtime.InteropServices.In()] _ULARGE_INTEGER libNewSize);
        
        void RemoteCopyTo([System.Runtime.InteropServices.In()] IStream pstm, [System.Runtime.InteropServices.In()] _ULARGE_INTEGER cb, [System.Runtime.InteropServices.Out()] out _ULARGE_INTEGER pcbRead, [System.Runtime.InteropServices.Out()] out _ULARGE_INTEGER pcbWritten);
        
        void Commit([System.Runtime.InteropServices.In()] System.UInt32 grfCommitFlags);
        
        void Revert();
        
        void LockRegion([System.Runtime.InteropServices.In()] _ULARGE_INTEGER libOffset, [System.Runtime.InteropServices.In()] _ULARGE_INTEGER cb, [System.Runtime.InteropServices.In()] System.UInt32 dwLockType);
        
        void UnlockRegion([System.Runtime.InteropServices.In()] _ULARGE_INTEGER libOffset, [System.Runtime.InteropServices.In()] _ULARGE_INTEGER cb, [System.Runtime.InteropServices.In()] System.UInt32 dwLockType);
        
        void Stat([System.Runtime.InteropServices.Out()] out tagSTATSTG pstatstg, [System.Runtime.InteropServices.In()] System.UInt32 grfStatFlag);
        
        void Clone([System.Runtime.InteropServices.Out()] out IStream ppstm);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("0c733a30-2a1c-11ce-ade5-00aa0044773d")]
    public interface ISequentialStream {
        
        void RemoteRead([System.Runtime.InteropServices.Out()] out System.Byte pv, [System.Runtime.InteropServices.In()] System.UInt32 cb, [System.Runtime.InteropServices.Out()] out System.UInt32 pcbRead);
        
        void RemoteWrite([System.Runtime.InteropServices.In()] System.Byte pv, [System.Runtime.InteropServices.In()] System.UInt32 cb, [System.Runtime.InteropServices.Out()] out System.UInt32 pcbWritten);
    }
    
    public struct _LARGE_INTEGER {
        
        public long QuadPart;
    }
    
    public struct _ULARGE_INTEGER {
        
        public System.UInt64 QuadPart;
    }
    
    public struct tagSTATSTG {
        
        public string pwcsName;
        
        public System.UInt32 type;
        
        public _ULARGE_INTEGER cbSize;
        
        public _FILETIME mtime;
        
        public _FILETIME ctime;
        
        public _FILETIME atime;
        
        public System.UInt32 grfMode;
        
        public System.UInt32 grfLocksSupported;
        
        public System.Guid clsid;
        
        public System.UInt32 grfStateBits;
        
        public System.UInt32 reserved;
    }
    
    public struct _FILETIME {
        
        public System.UInt32 dwLowDateTime;
        
        public System.UInt32 dwHighDateTime;
    }
    
    public struct _COR_IL_MAP {
        
        public System.UInt32 oldOffset;
        
        public System.UInt32 newOffset;
        
        public int fAccurate;
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaef-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugFrame {
        
        ICorDebugChain GetChain();
        
        ICorDebugCode GetCode();
        
        ICorDebugFunction GetFunction();
        
        System.UInt32 GetFunctionToken();
        
        void GetStackRange([System.Runtime.InteropServices.Out()] out System.UInt64 pStart, [System.Runtime.InteropServices.Out()] out System.UInt64 pEnd);
        
        ICorDebugFrame GetCaller();
        
        ICorDebugFrame GetCallee();
        
        ICorDebugStepper CreateStepper();
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb07-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugFrameEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugFrameEnum frames);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb0b-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugRegisterSet {
        
        System.UInt64 GetRegistersAvailable();
        
        ICorDebugRegisterSet GetRegisters([System.Runtime.InteropServices.In()] System.UInt64 mask, [System.Runtime.InteropServices.In()] System.UInt32 regCount);
        
        void SetRegisters([System.Runtime.InteropServices.In()] System.UInt64 mask, [System.Runtime.InteropServices.In()] System.UInt32 regCount, [System.Runtime.InteropServices.In()] System.UInt64 regBuffer);
        
        ICorDebugRegisterSet GetThreadContext([System.Runtime.InteropServices.In()] System.UInt32 contextSize);
        
        void SetThreadContext([System.Runtime.InteropServices.In()] System.UInt32 contextSize, [System.Runtime.InteropServices.In()] ICorDebugRegisterSet context);
    }
    
    public enum CorDebugChainReason {
        
        CHAIN_NONE = 0,
        
        CHAIN_CLASS_INIT = 1,
        
        CHAIN_EXCEPTION_FILTER = 2,
        
        CHAIN_SECURITY = 4,
        
        CHAIN_CONTEXT_POLICY = 8,
        
        CHAIN_INTERCEPTION = 16,
        
        CHAIN_PROCESS_START = 32,
        
        CHAIN_THREAD_START = 64,
        
        CHAIN_ENTER_MANAGED = 128,
        
        CHAIN_ENTER_UNMANAGED = 256,
        
        CHAIN_DEBUGGER_EVAL = 512,
        
        CHAIN_CONTEXT_SWITCH = 1024,
        
        CHAIN_FUNC_EVAL = 2048,
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcaf6-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugEval {
        
        void CallFunction([System.Runtime.InteropServices.In()] ICorDebugFunction pFunction, [System.Runtime.InteropServices.In()] System.UInt32 nArgs, [System.Runtime.InteropServices.In()] ref ICorDebugValue ppArgs);
        
        void NewObject([System.Runtime.InteropServices.In()] ICorDebugFunction pConstructor, [System.Runtime.InteropServices.In()] System.UInt32 nArgs, [System.Runtime.InteropServices.In()] ref ICorDebugValue ppArgs);
        
        void NewObjectNoConstructor([System.Runtime.InteropServices.In()] ICorDebugClass pClass);
        
        void NewString([System.Runtime.InteropServices.In()] string @string);
        
        void NewArray([System.Runtime.InteropServices.In()] System.UInt32 elementType, [System.Runtime.InteropServices.In()] ICorDebugClass pElementClass, [System.Runtime.InteropServices.In()] System.UInt32 rank, [System.Runtime.InteropServices.In()] System.UInt32 dims, [System.Runtime.InteropServices.In()] System.UInt32 lowBounds);
        
        int IsActive();
        
        void Abort();
        
        ICorDebugValue GetResult();
        
        ICorDebugThread GetThread();
        
        ICorDebugValue CreateValue([System.Runtime.InteropServices.In()] System.UInt32 elementType, [System.Runtime.InteropServices.In()] ICorDebugClass pElementClass);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb06-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugThreadEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugThreadEnum threads);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("f0e18809-72b5-11d2-976f-00a0c9b4d50c")]
    public interface ICorDebugErrorInfoEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugErrorInfoEnum errors);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("4a2a1ec9-85ec-4bfb-9f15-a89fdfe0fe83")]
    public interface ICorDebugAssemblyEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugAssemblyEnum values);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb03-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugBreakpointEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugBreakpointEnum breakpoints);
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb04-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugStepperEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugStepperEnum steppers);
    }
    
    public enum CorDebugStepReason {
        
        STEP_NORMAL = 0,
        
        STEP_RETURN = 1,
        
        STEP_CALL = 2,
        
        STEP_EXCEPTION_FILTER = 3,
        
        STEP_EXCEPTION_HANDLER = 4,
        
        STEP_INTERCEPT = 5,
        
        STEP_EXIT = 6,
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("5263e909-8cb5-11d3-bd2f-0000f80849bd")]
    public interface ICorDebugUnmanagedCallback {
        
        void DebugEvent([System.Runtime.InteropServices.In()] System.UInt32 pDebugEvent, [System.Runtime.InteropServices.In()] int fOutOfBand);
    }
    
    public struct _SECURITY_ATTRIBUTES {
        
        public System.UInt32 nLength;
        
        public System.IntPtr lpSecurityDescriptor;
        
        public int bInheritHandle;
    }
    
    public enum CorDebugCreateProcessFlags {
        
        DEBUG_NO_SPECIAL_OPTIONS = 0,
    }
    
    [System.Runtime.InteropServices.InterfaceType((System.Runtime.InteropServices.ComInterfaceType)1)]
    [System.Runtime.InteropServices.Guid("cc7bcb05-8a68-11d2-983c-0000f808342d")]
    public interface ICorDebugProcessEnum : ICorDebugEnum {
        
        void Skip([System.Runtime.InteropServices.In()] System.UInt32 celt);
        
        void Reset();
        
        ICorDebugEnum Clone();
        
        System.UInt32 GetCount();
        
        System.UInt32 Next([System.Runtime.InteropServices.In()] System.UInt32 celt, [System.Runtime.InteropServices.Out()] out ICorDebugProcessEnum processes);
    }
    
    [System.Runtime.InteropServices.Guid("6fef44d0-39e7-4c77-be8e-c9f8cf988630")]
    [System.Runtime.InteropServices.TypeLibType(2)]
    [System.Runtime.InteropServices.ClassInterface((short)0)]
    public class CorDebugClass : CorDebug, ICorDebug {
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public extern CorDebugClass();
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern void Initialize();
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern void Terminate();
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern void SetManagedHandler([System.Runtime.InteropServices.In()] ICorDebugManagedCallback pCallback);
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern void SetUnmanagedHandler([System.Runtime.InteropServices.In()] ICorDebugUnmanagedCallback pCallback);
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern ICorDebugProcess CreateProcess([System.Runtime.InteropServices.In()] string lpApplicationName, [System.Runtime.InteropServices.In()] string lpCommandLine, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpProcessAttributes, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpThreadAttributes, [System.Runtime.InteropServices.In()] int bInheritHandles, [System.Runtime.InteropServices.In()] System.UInt32 dwCreationFlags, [System.Runtime.InteropServices.In()] System.IntPtr lpEnvironment, [System.Runtime.InteropServices.In()] string lpCurrentDirectory, [System.Runtime.InteropServices.In()] System.UInt32 lpStartupInfo, [System.Runtime.InteropServices.In()] System.UInt32 lpProcessInformation, [System.Runtime.InteropServices.In()] CorDebugCreateProcessFlags debuggingFlags);
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern ICorDebugProcess DebugActiveProcess([System.Runtime.InteropServices.In()] System.UInt32 id, [System.Runtime.InteropServices.In()] int win32Attach);
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern ICorDebugProcessEnum EnumerateProcesses();
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern ICorDebugProcess GetProcess([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId);
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.InternalCall, MethodCodeType=System.Runtime.CompilerServices.MethodCodeType.Runtime)]
        public virtual extern void CanLaunchOrAttach([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId, [System.Runtime.InteropServices.In()] int win32DebuggingEnabled);
    }
    
    [System.Runtime.InteropServices.Guid("3d6f5f61-7538-11d3-8d5b-00104b35e7ef")]
    [System.Runtime.InteropServices.CoClass(typeof(CORDBLib_1_0.CorDebug))]
    public interface CorDebug : ICorDebug {
        
        void Initialize();
        
        void Terminate();
        
        void SetManagedHandler([System.Runtime.InteropServices.In()] ICorDebugManagedCallback pCallback);
        
        void SetUnmanagedHandler([System.Runtime.InteropServices.In()] ICorDebugUnmanagedCallback pCallback);
        
        ICorDebugProcess CreateProcess([System.Runtime.InteropServices.In()] string lpApplicationName, [System.Runtime.InteropServices.In()] string lpCommandLine, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpProcessAttributes, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpThreadAttributes, [System.Runtime.InteropServices.In()] int bInheritHandles, [System.Runtime.InteropServices.In()] System.UInt32 dwCreationFlags, [System.Runtime.InteropServices.In()] System.IntPtr lpEnvironment, [System.Runtime.InteropServices.In()] string lpCurrentDirectory, [System.Runtime.InteropServices.In()] System.UInt32 lpStartupInfo, [System.Runtime.InteropServices.In()] System.UInt32 lpProcessInformation, [System.Runtime.InteropServices.In()] CorDebugCreateProcessFlags debuggingFlags);
        
        ICorDebugProcess DebugActiveProcess([System.Runtime.InteropServices.In()] System.UInt32 id, [System.Runtime.InteropServices.In()] int win32Attach);
        
        ICorDebugProcessEnum EnumerateProcesses();
        
        ICorDebugProcess GetProcess([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId);
        
        void CanLaunchOrAttach([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId, [System.Runtime.InteropServices.In()] int win32DebuggingEnabled);
    }
    
    [System.Runtime.InteropServices.Guid("211f1254-bc7e-4af5-b9aa-067308d83dd1")]
    [System.Runtime.InteropServices.TypeLibType(2)]
    [System.Runtime.InteropServices.ClassInterface((short)0)]
    public abstract class EmbeddedCLRCorDebugClass : EmbeddedCLRCorDebug, ICorDebug {
        
        public EmbeddedCLRCorDebugClass() {
        }
        
        public abstract void Initialize();
        
        public abstract void Terminate();
        
        public abstract void SetManagedHandler([System.Runtime.InteropServices.In()] ICorDebugManagedCallback pCallback);
        
        public abstract void SetUnmanagedHandler([System.Runtime.InteropServices.In()] ICorDebugUnmanagedCallback pCallback);
        
        public abstract ICorDebugProcess CreateProcess([System.Runtime.InteropServices.In()] string lpApplicationName, [System.Runtime.InteropServices.In()] string lpCommandLine, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpProcessAttributes, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpThreadAttributes, [System.Runtime.InteropServices.In()] int bInheritHandles, [System.Runtime.InteropServices.In()] System.UInt32 dwCreationFlags, [System.Runtime.InteropServices.In()] System.IntPtr lpEnvironment, [System.Runtime.InteropServices.In()] string lpCurrentDirectory, [System.Runtime.InteropServices.In()] System.UInt32 lpStartupInfo, [System.Runtime.InteropServices.In()] System.UInt32 lpProcessInformation, [System.Runtime.InteropServices.In()] CorDebugCreateProcessFlags debuggingFlags);
        
        public abstract ICorDebugProcess DebugActiveProcess([System.Runtime.InteropServices.In()] System.UInt32 id, [System.Runtime.InteropServices.In()] int win32Attach);
        
        public abstract ICorDebugProcessEnum EnumerateProcesses();
        
        public abstract ICorDebugProcess GetProcess([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId);
        
        public abstract void CanLaunchOrAttach([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId, [System.Runtime.InteropServices.In()] int win32DebuggingEnabled);
    }
    
    [System.Runtime.InteropServices.Guid("3d6f5f61-7538-11d3-8d5b-00104b35e7ef")]
    [System.Runtime.InteropServices.CoClass(typeof(CORDBLib_1_0.EmbeddedCLRCorDebug))]
    public interface EmbeddedCLRCorDebug : ICorDebug {
        
        void Initialize();
        
        void Terminate();
        
        void SetManagedHandler([System.Runtime.InteropServices.In()] ICorDebugManagedCallback pCallback);
        
        void SetUnmanagedHandler([System.Runtime.InteropServices.In()] ICorDebugUnmanagedCallback pCallback);
        
        ICorDebugProcess CreateProcess([System.Runtime.InteropServices.In()] string lpApplicationName, [System.Runtime.InteropServices.In()] string lpCommandLine, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpProcessAttributes, [System.Runtime.InteropServices.In()] _SECURITY_ATTRIBUTES lpThreadAttributes, [System.Runtime.InteropServices.In()] int bInheritHandles, [System.Runtime.InteropServices.In()] System.UInt32 dwCreationFlags, [System.Runtime.InteropServices.In()] System.IntPtr lpEnvironment, [System.Runtime.InteropServices.In()] string lpCurrentDirectory, [System.Runtime.InteropServices.In()] System.UInt32 lpStartupInfo, [System.Runtime.InteropServices.In()] System.UInt32 lpProcessInformation, [System.Runtime.InteropServices.In()] CorDebugCreateProcessFlags debuggingFlags);
        
        ICorDebugProcess DebugActiveProcess([System.Runtime.InteropServices.In()] System.UInt32 id, [System.Runtime.InteropServices.In()] int win32Attach);
        
        ICorDebugProcessEnum EnumerateProcesses();
        
        ICorDebugProcess GetProcess([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId);
        
        void CanLaunchOrAttach([System.Runtime.InteropServices.In()] System.UInt32 dwProcessId, [System.Runtime.InteropServices.In()] int win32DebuggingEnabled);
    }
}
